E:\www_yii\basic>codecept run
Codeception PHP Testing Framework v2.3.6
Powered by PHPUnit 6.4-dev by Sebastian Bergmann and contributors.

[1mFunctional Tests (10) [22m---------------------------------------------------------------------------------------------
---------
[32;1m+[39;22m [35;1mContactFormCest:[39;22m Open contact page [32m(0.87s)[39m
[32;1m+[39;22m [35;1mContactFormCest:[39;22m Submit empty form [32m(0.14s)[39m
[32;1m+[39;22m [35;1mContactFormCest:[39;22m Submit form with incorrect email [32m(0.05s)[39m
[32;1m+[39;22m [35;1mContactFormCest:[39;22m Submit form successfully [32m(0.33s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Open login page [32m(0.11s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Internal login by id [32m(0.07s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Internal login by instance [32m(0.03s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Login with empty credentials [32m(0.04s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Login with wrong credentials [32m(0.03s)[39m
[32;1m+[39;22m [35;1mLoginFormCest:[39;22m Login successfully [32m(0.03s)[39m
----------------------------------------------------------------------------------------------------------------------------


[1mUnit Tests (8) [22m----------------------------------------------------------------------------------------------------
---------
[32;1m+[39;22m [35;1mContactFormTest:[39;22m Email is sent on contact [32m(0.36s)[39m
[32;1m+[39;22m [35;1mLoginFormTest:[39;22m Login no user [32m(0.00s)[39m
[32;1m+[39;22m [35;1mLoginFormTest:[39;22m Login wrong password [32m(0.00s)[39m
[32;1m+[39;22m [35;1mLoginFormTest:[39;22m Login correct [32m(0.01s)[39m
[32;1m+[39;22m [35;1mUserTest:[39;22m Find user by id [32m(0.00s)[39m
[32;1m+[39;22m [35;1mUserTest:[39;22m Find user by access token [32m(0.00s)[39m
[32;1m+[39;22m [35;1mUserTest:[39;22m Find user by username [32m(0.00s)[39m
[32;1m+[39;22m [35;1mUserTest:[39;22m Validate user [32m(0.00s)[39m
----------------------------------------------------------------------------------------------------------------------------



Time: 540 ms, Memory: 28.00MB

[30;42mOK (18 tests, 52 assertions)[0m

E:\www_yii\basic>




Unit Tests：
Unit tests are located in tests/unit directory and are supposed to contain all kind of unit and integration testing.
每个测试用例引用了一个 Codeception\Test\Unit 类, which is standard Codeception format for unit testing.
你很难在Yii开发完全独立的单元测试,所以每个测试用例需要一个应用程序去引导。在tests/unit.suite.yml 中使能 Yii2 module。
通过在测试用例中访问$this->tester类，可以使用Yii2 module的方法。

如果启用了Yii2模块可以安全地调用Yii::$app应用程序在一个测试中。如果你想添加辅助方法为你的测试用例或自定义断言，那么你不应该引用Codeception\test\Unit，而是编写你自己的单独的助手类。

《-- Helpers 类：
Codeception 不限制你使用库。通过运行bootstrap命令，Codeception产生3个假的模块，每一个创建一个新的用例。这些客服端模块叫做Helpers，放在路径tests/_support下面。

未完。。。。待续。
--》

单元测试指南：



Functional Tests：
当去测试真正的WEB应用特性仅仅使用单元测试是不行的。你希望测试应用如何处理请求，如何给出响应，什么数据会被保存到数据库中等等。在用户相近的环境中测试应用程序但没有发动真正的网络服务器或浏览器可以使用功能测试。它们比单元测试更容易写。它们在一个简单的DSL中描述交互场景，所以你不需要直接处理应用而是从用户的角度描述行为。

<?php
$I->amOnPage(['site/contact']);
$I->submitForm('#contact-form', []);
$I->expectTo('see validations errors');
$I->see('Contact', 'h1');
$I->see('Name cannot be blank');
$I->see('Email cannot be blank');
$I->see('Subject cannot be blank');
$I->see('Body cannot be blank');

这种方法你不仅在一个站点上测试ContactForm 而且实际上输出了这个应用。Codeception提供了标准的动作集比如amOnPage, submitForm, see来用来测试。
功能测试应该被写在Cest files里面，是一个场景驱动的Codeception测试。可以通过下面的方法创建一个测试：
./vendor/bin/codecept g:cest functional MyNewScenarioCest

《--
Cest Classes

未完。。。。待续。
--》


API Tests：
API Tests不包含在任何YII模版中，所以你需要手动设置它们如果需要的话。API Testing是一个功能测试级别的测试，但是不是测试HTML动作的响应，它们通过REST或者SOAP协议来测试请求和响应。To start writing api tests you should create a suite for them：
./vendor/bin/codecept g:suite api

You will need to enable REST, Yii2 module in tests/api.suite.yml:

class_name: ApiTester
modules:
    enabled:
        - REST:
            url: /api/v1
            depends: Yii2
        - \ApiBundle\Helper\Api
    config:
        - Yii2

Yii2模块动作比如amOnPage或者see 不是可见的在API测试中。




Acceptance Tests：
从验收测试的角度来做功能测试。它们在真实的浏览器和WEB服务器上测试用户和应用之间的交互。他们要慢得多,更加脆弱他们要慢得多,更加脆弱。他们不应该复制功能测试的测试功能但应该用于测试应用程序的UI。如果你不能确定哪些是验收测试哪些是功能测试，为JavaScript-rich编写验收测试应用程序，这里UI高度依赖浏览器处理。
默认情况下，基本的应用验收测试是不使能的。你可以通过如下方式使能，renaming acceptance.suite.yml.example to acceptance.suite.yml
基础模版使用codeception/base包，这个包里面不包含facebook/webdriver库，这个库是验收测试必须的。Please change codeception/base to codeception/codeception in composer.json and run the update command.

然后你需要在测试模式下启动应用程序服务器：serve
and start a Selenium Server or PhantomJS. 

功能测试和验收测试是类似的，所以为了避免冲突，只能使能其中一个。
You must also set cleanup:false so Yii2 changes to database to be saved and used by application running on web server. 
Use entryScript and entryUrl values to change the default host and script configuration for your app.


Manual Setup && Configuration：

To start you need to install Codeception via Composer：
composer require "codeception/codeception" --dev

Create basic test suites：
./vendor/bin/codecept bootstrap

Enable module Yii2 for functional tests inside functional.suite.yml:
# functional.suite.yml
modules:
    enabled:
        - Yii2:
            configFile: #insert path to config file


仅有的YII2模块请求参数是configFile，这个文件配置了YII应用的测试配置。
<?php
// config/test.php
$config =  yii\helpers\ArrayHelper::merge(
    require(__DIR__ . '/main.php'),
    require(__DIR__ . '/main-local.php'),
    [
        'id' => 'app-tests',
        'components' => [
            'db' => [
                'dsn' => 'mysql:host=localhost;dbname=yii_app_test',
            ]
        ]        
    ]
);
return $config;


测试配置推荐存储在应用的config文件夹中。需要提供路径去测试跟codeception.yml文件相关的配置。
需要确认YII_ENV 常量被设置为test，在模版的tests/_bootstrap.php文件中。
一旦配置功能测试应该易于创建设置单元测试和验收测试。
在模版中，configFile在全局配置文件中被定义：
# inside codeception.yml
modules:
    config:
        Yii2:
            configFile: 'config/test.php'





